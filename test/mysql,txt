Mysql常用命令
1.	登录命令
/opt/mysql/bin/mysql -udbuser -pAdmin@123 -S /opt/mysql/data/mgrdbsvr-220_23_9_65-2/mgrdbsvr-220_23_9_65-2.sock 

/opt/mysql/bin/mysql  -P32080 -udbuser -pAdmin@123 -h 172.28.159.160
2.	查看进程连接数
1.	查看最大连接数
mysql>show variables like '%max_connections%';
修改最大连接数
set GLOBAL max_connections = 200;  #一旦mysql重启，设置的参数失效。通常，mysql的最大连接数默认是100, 最大可以达到16384，IES当前设置最大连接数为2000.
2.	查看当前连接数情况
mysql> show processlist;  --显示连接进程
mysql> select count(1) from information_schema.processlist;  --进程数量
mysql> select user,count(*) from  information_schema.processlist group by user;  --每个用户的连接数
mysql> select db,count(*) from  information_schema.processlist group by db;  --每个数据库的连接数
mysql> select * from information_schema.processlist limit 5;
mysql> select substring_index(host,':',1),count(1) from  information_schema.processlist where db = 'ies' group by substring_index(host,':',1);  --连接数据库的IP
#processlist表可以查看连接执行情况。
3.	命令：show status like ‘%下面的变量%’;
Aborted_clients                由于客户没有正确关闭连接已经死掉，已经放弃的连接数量。 
Aborted_connects            尝试已经失败的MySQL服务器的连接的次数。 
Connections                     试图连接MySQL服务器的次数。 
Created_tmp_tables          当执行语句时，已经被创造了的隐含临时表的数量。 
Delayed_insert_threads     正在使用的延迟插入处理器线程的数量。 
Delayed_writes                用INSERT DELAYED写入的行数。 
Delayed_errors                用INSERT DELAYED写入的发生某些错误(可能重复键值)的行数。 
Flush_commands            执行FLUSH命令的次数。 
Handler_delete                 请求从一张表中删除行的次数。 
Handler_read_first          请求读入表中第一行的次数。 
Handler_read_key           请求数字基于键读行。 
Handler_read_next           请求读入基于一个键的一行的次数。 
Handler_read_rnd           请求读入基于一个固定位置的一行的次数。 
Handler_update              请求更新表中一行的次数。 
Handler_write                 请求向表中插入一行的次数。 
Key_blocks_used            用于关键字缓存的块的数量。 
Key_read_requests         请求从缓存读入一个键值的次数。 
Key_reads                      从磁盘物理读入一个键值的次数。 
Key_write_requests         请求将一个关键字块写入缓存次数。 
Key_writes                      将一个键值块物理写入磁盘的次数。 
Max_used_connections    同时使用的连接的最大数目。 
Not_flushed_key_blocks   在键缓存中已经改变但是还没被清空到磁盘上的键块。 
Not_flushed_delayed_rows      在INSERT DELAY队列中等待写入的行的数量。 
Open_tables                  打开表的数量。 
Open_files                     打开文件的数量。 
Open_streams               打开流的数量(主要用于日志记载） 
Opened_tables              已经打开的表的数量。 
Questions                     发往服务器的查询的数量。 
Slow_queries                要花超过long_query_time时间的查询数量。 
Threads_connected       当前打开的连接的数量。 
Threads_running          不在睡眠的线程数量。 
Uptime                        服务器工作了多少秒。
4.	查看数据库表大小
1.	实例数据大小
select concat(round(sum(DATA_LENGTH/1024/1024),2),'M') from information_schema.tables;
2.	各数据库大小
select table_schema,concat(round(sum(DATA_LENGTH/1024/1024),2),'M') from information_schema.tables group by table_schema;
3.	数据库中表大小
select table_name,concat(round(sum(DATA_LENGTH/1024/1024),2),'M') from information_schema.tables where table_schema='ies' group by table_name order by round(sum(DATA_LENGTH/1024/1024),2) desc limit 5;
5.	逻辑备份
/opt/mysql/bin/mysqldump --add-drop-database --add-drop-table --set-gtid-purged=OFF --single-transaction --quick --routines --triggers --skip-comments -h 100.101.84.110 -P 32081 -u dbuser -p -B mateinfo -r ./iesservicedbsvr_mateinfo.sql

逻辑恢复：
/opt/mysql/bin/mysql -h 10.93.145.252 -P 32084 -u dbuser -pAdmin@123 -Dmateinfo < /opt/iesdata/mateinfo.sql

导出表结构：
/opt/mysql/bin/mysqldump -h 219.0.125.23 -P 32080 -u dbuser -p -d ies t_intg_ws_send_log > dump.sql

导出表数据：
/opt/mysql/bin/mysqldump -h 219.0.125.23 -P 32080 -u dbuser -p ies t_intg_dm_07r1 > config.sql
6.	物理备份
/opt/mysql/bin/mysqlbackup --host=8.7.37.37 --port=32081 --user=dbuser -p --backup-dir='/opt/oss/backuptmp/management/backupForManagement/tenantpublicdbsvr-1-1000' --compress --compress-level=5             --read-threads=3 --process-threads=4 --write-threads=3 backup

DBM备份和恢复
cd /opt/paas/oss/manager/apps/DBAgent/bin 
./dbsvc_tool -cmd backup-db-instance -instid iesservicedbsvr-219_0_148_63-0@219_0_148_132-0 -method physical

./dbsvc_tool -cmd repair-db-instance -method rebuild -instid iesservicedbsvr-219_0_148_63-0@219_0_148_132-0 -newmaster iesservicedbsvr-219_0_148_63-0 -masterfile /opt/pub/backup_local/iesservicedbsvr-219_0_148_63-0@219_0_148_132-0_iesservicedbsvr-219_0_148_63-0_20190201235541_manual_full_day_physical.tar.gz
7.	主备复制关系
第一步：在主库上记录二进制日志。主库在提交事务完成数据更新前，将数据更新的事件记录到二进制日志中。Mysql会按事务提交的顺序而非每条语句的执行顺序来记录二进制日志。

第二步：备库将主库的二进制日志复制到其本地的中继日志中。
1）	备库会启动一个工作线程，称为I/O线程，I/O线程跟主库建立一个普通的客户端连接，然后在主库上启动一个特殊的二进制转储（binlog dump）线程。
查看主库上binlog dump线程当前状态：
select * from information_schema.processlist where command='Binlog Dump';
2）	备库的IO线程和SQL线程异步执行。
show variables like 'read_only';--备库ON，主库OFF;
show variables like 'log_slave_updates'; 开启二进制日志。

1）	Seconds_behind_master值：通过将服务器当前的时间戳与二进制日志中的事件的时间戳相对比得到的，所以只有在执行事件时，才能报告延迟。
2）	使用mysqlbinlog找到样例日志的日志事件偏移量：
Mysqlbinlog mysql-bin.000113 |egrep ‘^# at ’
8.	innodb引擎状态
show engine innodb status\G
9.	binlog日志查看
show binlog events in 'mysql-bin.000028' from 701071347 limit 10;
show variables like '%expire_logs_days%';
10.	definer发生变化引起表无法访问
select TABLE_SCHEMA,table_name,DEFINER from information_schema.VIEWS;
select concat("alter DEFINER=`dbuser`@`%` SQL SECURITY DEFINER VIEW ",TABLE_SCHEMA,".",TABLE_NAME," as ",VIEW_DEFINITION,";") from information_schema.VIEWS where DEFINER='ows_db_user@%';
11.	新建用户
mysql> insert into mysql.user(Host,User,Password) values("localhost","test",password("1234"));
12.	为用户授权
1.	为用户创建一个数据库（testDB）
mysql>create database testDB;

2.	授权test用户拥有testDB数据库的所有权限（某个数据库的所有权限）：
mysql>grant all privileges on testDB.* to test@localhost identified by '1234';
mysql>flush privileges;//刷新系统权限表

3.	指定部分权限给一用户：
mysql>grant select,update on testDB.* to test@localhost identified by '1234';
mysql>flush privileges; //刷新系统权限表

4.	授权test用户拥有所有数据库的某些权限：
mysql>grant select,delete,update,create,drop on *.* to test@"%" identified by "1234";
//test用户对所有数据库都有select,delete,update,create,drop 权限。
//@"%" 表示对所有非本地主机授权，不包括localhost。（localhost地址设为127.0.0.1，如果设为真实的本地地址，不知道是否可以，没有验证。）
//对localhost授权：加上一句grant all privileges on testDB.* to test@localhost identified by '1234';即可。

13.	删除用户
mysql>Delete FROM user Where User='test' and Host='localhost';
mysql>flush privileges;
mysql>drop database testDB; //删除用户的数据库
删除账户和权限：
mysql>drop user 用户名@'%';
mysql>drop user 用户名@ localhost; 
14.	修改制定用户密码
mysql>update mysql.user set password=password('新密码') where User="test" and Host="localhost";
mysql>flush privileges;



